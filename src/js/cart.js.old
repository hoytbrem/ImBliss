class Item {
    #totalPrice;
    constructor(element_node, item_id, name, price, qty, description, category, image, alt_text, rating = 0, totalPrice = 0) {
        this._element_node = element_node;
        this._item_id = item_id;
        this._name = name;
        this._price = parseFloat(price);
        this._qty = parseInt(qty) || 1;
        this._description = description;
        this._category = category;
        this._image = image;
        this._alt_text = alt_text;
        this._rating = rating;
        this.#totalPrice = totalPrice;
    }

    get element_node() {
        return this._element_node;
    }

    set element_node(value) {
        this._element_node = value;
    }

    get item_id() {
        return this._item_id;
    }

    set item_id(value) {
        this._item_id = value;
    }

    get name() {
        return this._name;
    }

    set name(value) {
        this._name = value;
    }

    get price() {
        return this._price;
    }

    set price(value) {
        this._price = parseFloat(value);
    }

    get qty() {
        return this._qty;
    }

    set qty(value) {
        this._qty = parseInt(value);
        this.#totalPrice = value * this._price;
        console.log(this.#totalPrice);
    }

    get description() {
        return this._description;
    }

    set description(value) {
        this._description = value;
    }

    get category() {
        return this._category;
    }

    set category(value) {
        this._category = value;
    }

    get image() {
        return this._image;
    }

    set image(value) {
        this._image = value;
    }

    get alt_text() {
        return this._alt_text;
    }

    set alt_text(value) {
        this._alt_text = value;
    }

    get rating() {
        return this._rating;
    }

    set rating(value) {
        this._rating = parseFloat(value);
    }

    get totalPrice() {
        return this.#totalPrice;
    }

    set totalPrice(value) {
        this.#totalPrice = parseFloat(value);
    }
}

let initialLoad = true;
var data = [];
var cartList = [];

function setAttributes(element, attributes) {
    for (let key in attributes) {
        element.setAttribute(key, attributes[key]);
    }
}



async function updateTotalAndPrice(data) {
    let grandTotal = 0; // Initialize grandTotal to 0

    console.log(data);

    for (let index = 0; index < data.length; index++) {
        console.log(data[index].totalPrice);
    }

    for (let { totalPrice } of data) {
        console.log(totalPrice);
        grandTotal += totalPrice; // Accumulate totalPrice values
    }

    let subTotal = document.getElementById("subTotal");
    let itemCount = document.getElementById("cart-item-count");

    // Corrected the syntax for template literals below
    subTotal.innerHTML = `&dollar;${grandTotal}`;
    itemCount.innerHTML = `${data.length} Items`;
}

/**
 * This function populates the cart list with data received and renders each item using the itemRender function.
 * @param {Array} dataReceived - The data received to populate the cart list.
 * @param {Function} itemRender - The function used to render each item in the cart list.
*/
function populateCart(dataReceived, itemRender) {
    let paddedControlledContainer = document.getElementById("imbliss-cart-list");

    let imblissCartContainer = document.createElement("div");
    setAttributes(imblissCartContainer, {
        "class": "imbliss-cart-list"
    });
    paddedControlledContainer.appendChild(imblissCartContainer);

    data = [...dataReceived];

    if (data.length == 0) {
        handleIfEmpty(imblissCartContainer);
    }

    data.forEach(itemObject => {
        itemRender(itemObject, imblissCartContainer);
    });
    initialLoad = false;
}

fetch("../src/php/get-cart-data.php")
    .then((response) => {
        if (!response.ok) {
            throw new Error("Could not grab cart data.");
        }
        return response.json();
    })
    .then((data) => {
        populateCart(data, renderCartItem);
        updateTotalAndPrice(data);
    })
    .catch((error) => {
        console.log(`Error: ${error}`);
    });

function removeItem(value, array) {
    let thisData = [...array];
    let newArray = thisData.filter((element) => {
        return element.item_id != value;
    });
    return newArray;
}



var documentDone = false;

// Wait for the DOM to be fully loaded
document.addEventListener("DOMContentLoaded", () => {
    // Get the cart row element
    let cartCollapse = document.getElementById("cartRow");
    // Get the cart open button element
    let cartOpenButton = document.getElementById("cartOpenButton");
    cartOpenButton.addEventListener("click", () => {
        cartCollapse.classList.toggle("cart-collapse-open")
    });
    // Set a flag to indicate that the document is done loading
    documentDone = true;
});

/**
 * Renders a single item in the cart.
 * @param {Item} itemObject - The object representing the item.
 * @param {HTMLElement} imblissCartContainer - The container element for the cart.
*/
function renderCartItem(itemObject, imblissCartContainer) {

    let { item_id, qty, name, description, category, image, price, alt_text } = itemObject;

    // New List Item with its own container.
    let listGroupItemContainer = document.createElement("div");
    setAttributes(listGroupItemContainer, { "class": "row" });
    imblissCartContainer.appendChild(listGroupItemContainer);
    let listGroupItem = document.createElement("div");
    setAttributes(listGroupItem, { "class": "list-group-item col-sm-7" });
    imblissCartContainer.append(listGroupItemContainer);

    // Container for product
    let cartItemRow = document.createElement("div");
    setAttributes(cartItemRow, { "class": "imbliss-cart-item row" });
    listGroupItem.appendChild(cartItemRow);

    let item = new Item(listGroupItem, item_id, name, price, qty, description, category, image, alt_text);

    item.totalPrice = 0;

    //console.log(item);

    // Cart product image
    let cartItemImage = document.createElement("img");
    setAttributes(cartItemImage, {
        "class": "col-sm-5 imbliss-cart-img ",
        "src": `../images/product-images/${item.image}`,
        "alt": item.alt_text
    });
    listGroupItemContainer.append(cartItemImage);
    listGroupItemContainer.append(listGroupItem);

    // Cart header
    let cartHeader = document.createElement("h3");
    setAttributes(cartHeader, { "class": "col-sm-12" });
    cartHeader.innerText = item.name;
    cartItemRow.append(cartHeader);

    // Ratings
    let ratingGroup = document.createElement("div");
    setAttributes(ratingGroup, { "class": "rating-group col-sm-4" });
    cartItemRow.append(ratingGroup);

    for (let index = 0; index < 5; index++) {

        let star = document.createElement("div");
        setAttributes(star, { "class": "rating-star" });

        star.addEventListener("click", () => {
            let starIndex = index + 1;

            //console.log(starIndex);

            // switch (starIndex) {
            //     case 1:
            //     //setAttributes(this, "");
            // }
        });

        ratingGroup.appendChild(star);
    }

    // Price 
    let cartPrice = document.createElement("span");
    setAttributes(cartPrice, { "class": "col-sm-12 price-tag" });
    cartPrice.innerHTML = `&dollar;${item.price.toFixed(2)}`;
    cartItemRow.append(cartPrice);

    // Cart Minus/Plus/Remove Buttons/Spacer for Buttons

    let cartButtonGroup = document.createElement("div");
    setAttributes(cartButtonGroup, {
        "class": "btn-group col-sm-4",
        "role": "group",
        "aria-label": "cart-btn-group"
    });
    cartItemRow.append(cartButtonGroup);

    let buttonQuantitySpacer = document.createElement("div");

    // Minus Button
    let cartButtonMinus = document.createElement("button");
    setAttributes(cartButtonMinus, {
        "class": "imbliss-cart-minus-button cart-button-size",
        "type": "button"
    });
    cartButtonMinus.innerHTML = "";
    cartButtonMinus.addEventListener("click", () => {
        item.qty--;
        if (item.qty <= 0) {
            listGroupItemContainer.remove();
            data = removeItem(item.item_id, data);

            // Renders empty item if there's no items in the cart.
            console.log(data);
            if (data.length == 0)
                handleIfEmpty(imblissCartContainer);
        }
        updateTotalAndPrice(data);
        buttonQuantitySpacer.innerHTML = `<span class="item-qty">${item.qty}</span>`;
        cartPrice.innerHTML = `&dollar;${item.totalPrice.toFixed(2)}`;
    });
    cartButtonGroup.append(cartButtonMinus);


    // disabled button in the middle between the two minus and plus buttons.
    let disabledButtonSpreader = document.createElement("span");
    setAttributes(disabledButtonSpreader, { "class": "cart-button-size text-center qty" });
    cartButtonGroup.append(disabledButtonSpreader);

    disabledButtonSpreader.appendChild(buttonQuantitySpacer);
    buttonQuantitySpacer.innerHTML = `<span class="item-qty">${item.qty}</span>`;


    // Add Button
    let cartButtonAdd = document.createElement("button");
    cartButtonAdd.innerHTML = "";
    setAttributes(cartButtonAdd, {
        "class": "imbliss-cart-add-button cart-button-size",
        "type": "button"
    });
    cartButtonAdd.addEventListener("click", () => {
        item.qty++;
        //item.totalPrice = item.price * item.qty;
        updateTotalAndPrice(data); // Call the updateTotalAndPrice() function here
        buttonQuantitySpacer.innerHTML = `<span class="item-qty">${item.qty}</span>`;
        cartPrice.innerHTML = `&dollar;${item.price.toFixed(2)}`;
    });

    cartButtonGroup.append(cartButtonAdd);
}

/**
 * Adds an item to the cart.
 * @param {Item} itemObject - The item object to be added.
*/
function addItem(itemObject) {
    let { item_id } = itemObject;

    if (documentDone) {
        let found = false;
        found = data.filter((element) => {
            if (element.item_id == item_id) {
                element.qty++;
                return true;
            }
        });

        if (!found) {
            data.push(itemObject);
            handleIfEmpty(imblissCartContainer);
            renderCartItem(itemObject);
        }
    }
}

/**
 * Renders an empty list item in the cart container.
 * @param {HTMLElement} cartContainer - The container element where the empty list item will be appended.
*/
function handleIfEmpty(cartContainer) {
    let emptyListItem = document.getElementById("emptyListItem") ?? document.createElement("div");
    if (data.length == 0) {
        emptyListItem.innerHTML = "<h3>No Items Yet!</h3>";
        setAttributes(emptyListItem, {
            "class": "col-sm-12 text-center w-100 mt-4 text-larger tk-source-serif-4-display",
            "id": "emptyListItem"
        });
        cartContainer.appendChild(emptyListItem);
    } else {
        emptyListItem.remove();
    }
}
